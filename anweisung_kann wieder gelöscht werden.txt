Als Nächstes müssen wir sicherstellen, dass der Backend-Endpunkt korrekt konfiguriert ist. In der Datei backend/routes/api.py sollten wir einen neuen Endpunkt für Jass-Daten hinzufügen:
# api.py
from flask import Blueprint
from .players_routes import players_routes
from .player_profiles_routes import player_profiles_routes
from .auth_routes import auth_routes  # Importieren des auth_routes Blueprint
from .groups_routes import groups_routes  # Importieren des groups_routes Blueprint

# Initialisierung des 'Ober'-Blueprints mit URL-Präfix /api
api = Blueprint('api', __name__, url_prefix='/api')

# Registrierung der einzelnen Blueprints unter dem /api-Präfix
api.register_blueprint(players_routes, url_prefix='/players')  # Wird zu /api/players/[players_routes-Endpunkte]
api.register_blueprint(player_profiles_routes, url_prefix='/profiles')  # Wird zu /api/profiles/[PlayerProfiles-Endpunkte]
api.register_blueprint(auth_routes, url_prefix='/auth')  # Wird zu /api/auth/[auth_routes-Endpunkte]
api.register_blueprint(groups_routes, url_prefix='/groups')  # Wird zu /api/groups/[groups_routes-Endpunkte]
Fügen Sie am Ende dieser Datei folgende Zeilen hinzu:
from .jass_routes import jass_routes  # Importieren Sie das neue jass_routes Blueprint

api.register_blueprint(jass_routes, url_prefix='/jass')  # Wird zu /api/jass/[jass_routes-Endpunkte]
Erstellen Sie eine neue Datei backend/routes/jass_routes.py mit folgendem Inhalt:
from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required
from ..models.jass import Jass
from ..extensions import db

jass_routes = Blueprint('jass', __name__)

@jass_routes.route('', methods=['POST'])
@jwt_required()
def create_jass():
    data = request.json
    new_jass = Jass(
        mode=data['mode'],
        group_id=data['group_id'],
        rosen10_player_id=data['rosen10_player_id'],
        date=data['date']
    )
    
    for player in data['players']:
        new_jass.add_player(player['id'], player['team'])
    
    db.session.add(new_jass)
    db.session.commit()
    
    return jsonify({"message": "Jass erfolgreich gespeichert", "id": new_jass.id}), 201
Stellen Sie sicher, dass Sie ein Jass-Modell in backend/models/jass.py haben, das die benötigten Felder enthält.
Diese Änderungen sollten das Problem mit dem doppelten "api" im Pfad beheben und einen korrekten Endpunkt für das Speichern von Jass-Daten bereitstellen. Vergessen Sie nicht, den Backend-Server neu zu starten, nachdem Sie diese Änderungen vorgenommen haben.