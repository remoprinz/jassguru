rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // PLAYERS - Öffentliche Spielerprofile
    // =====================================================================
    match /players/{playerId} {
      // Jeder darf Spielerprofile lesen (für Namen, Bilder etc.)
      allow read: if true;

      // Erstellen: Nur für sich selbst oder als Gastspieler
      allow create: if request.auth != null &&
                       (request.resource.data.userId == request.auth.uid ||
                        (request.resource.data.isGuest == true && request.resource.data.userId == null));

      // Aktualisieren: Nur eigene Profile, Gastspieler oder Nickname-Updates von Gruppen-Mitgliedern
      allow update: if request.auth != null &&
                       (
                         // Eigenes Profil oder Gastspieler (vollständige Berechtigung)
                         resource.data.userId == request.auth.uid ||
                         resource.data.isGuest == true ||
                         // Oder nur Nickname/displayName Update von authentifizierten Usern
                         // (Für Gruppen-Synchronisation - sicher, da nur Name geändert wird)
                         (request.resource.data.diff(resource.data).affectedKeys().hasAny(['nickname', 'displayName']) &&
                          request.resource.data.diff(resource.data).affectedKeys().size() <= 2)
                       );
                        
      // Löschen: Nur eigene Profile oder Gastspieler
      allow delete: if request.auth != null &&
                       (resource.data.userId == request.auth.uid || 
                        resource.data.isGuest == true);
    }

    // =====================================================================
    // USERS - Private Benutzerdaten
    // =====================================================================
    match /users/{userId} {
      // Zugriff: Nur der Benutzer selbst
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Erstellen: E-Mail muss mit Token übereinstimmen
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email;

      // Aktualisieren: playerId und email sind unveränderlich
      // ODER nur lastActiveGroupId wird aktualisiert
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       (
                         // Vollständiges Update: alle kritischen Felder bleiben gleich
                         (request.resource.data.playerId == resource.data.playerId &&
                          request.resource.data.email == resource.data.email) ||
                         // Oder nur lastActiveGroupId Update (sichere UX-Operation)
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActiveGroupId'])
                       );
      
      // Löschen verboten (Datenintegrität)
      allow delete: if false;
    }

    // =====================================================================
    // GROUPS - Gruppen
    // =====================================================================
    match /groups/{groupId} {
      // Jeder darf Gruppen lesen (E-Mails wurden entfernt)
      allow read: if true;

      // Erstellen: Ersteller wird automatisch Admin
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.adminIds &&
                    request.resource.data.createdBy == request.auth.uid;

      // Aktualisieren: Nur Gruppen-Admins
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.adminIds;

      // Löschen: Nur der ursprüngliche Ersteller
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.createdBy;
    }

    // =====================================================================
    // ACTIVEGAMES - Laufende Spiele
    // =====================================================================
    match /activeGames/{gameId} {
      // Jeder darf laufende Spiele lesen (es ist nur Jassen)
      allow read: if true;

      // Erstellen: Nur wenn man selbst Teilnehmer ist
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.participantUids;

      // Aktualisieren: Nur Teilnehmer dürfen den Spielstand ändern
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.participantUids;

      // Löschen: Nur Teilnehmer dürfen ihre Spiele löschen (für Abort-Funktionalität)
      allow delete: if request.auth != null && 
                    request.auth.uid in resource.data.participantUids;

      // Rounds-Subcollection: Gleiche Regeln wie Hauptdokument
      match /rounds/{roundId} {
        allow read: if true;
        allow write: if request.auth != null;
        allow delete: if false;
      }
    }

    // =====================================================================
    // TOURNAMENTS - Turniere
    // =====================================================================
    match /tournaments/{tournamentId} {
      // Jeder darf Turniere lesen
      allow read: if true;

      // Erstellen: Ersteller wird automatisch Admin
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.adminIds &&
                    request.resource.data.createdBy == request.auth.uid;

      // Aktualisieren: Nur Turnier-Admins
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.adminIds;

      // Löschen verboten (Turniere sind Teil der Historie)
      allow delete: if false;

      // Tournament Games-Subcollection: Nur Admins dürfen schreiben
      match /games/{gameId} {
        allow read: if true;
        allow write: if request.auth != null && 
                     request.auth.uid in get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.adminIds;
        allow delete: if false;
      }
    }

    // =====================================================================
    // JASSGAMESUMMARIES & SESSIONS - Öffentlich lesbare Spieldaten
    // =====================================================================
    // Diese Collections enthalten die Rohdaten für alle Statistiken.
    // JEDER darf sie lesen, authentifizierte Teilnehmer dürfen für ihre Sessions schreiben.
    match /jassGameSummaries/{sessionId}/{documents=**} {
      allow read: if true;
      
      // ✅ KORRIGIERTE REGEL: Prüft die participantUids aus der sessions Collection
      allow write: if request.auth != null && (
        // Für Updates: Prüfe das existierende Dokument
        (resource != null && resource.data.participantUids != null && request.auth.uid in resource.data.participantUids) ||
        // Für Creates (Haupt- oder Subdokumente): Prüfe die Session in der sessions Collection
        (resource == null && exists(/databases/$(database)/documents/sessions/$(sessionId)) && 
         request.auth.uid in get(/databases/$(database)/documents/sessions/$(sessionId)).data.participantUids) ||
        // Fallback für Session-Hauptdokument mit participantUids in Request
        (resource == null && request.resource.data.participantUids != null && 
         request.auth.uid in request.resource.data.participantUids)
      );
                       
      // ❌ Cloud Functions haben trotzdem vollständigen Zugriff
      // ✅ Offline-Fähigkeit für Clients wiederhergestellt
      // ✅ Sicherheit durch participantUids-Prüfung gewährleistet
      // ✅ Funktioniert sowohl für Session-Updates als auch Subcollection-Writes
    }

    // =====================================================================
    // SESSIONS - Jass-Sessions und Tournament-Sessions  
    // =====================================================================
    match /sessions/{sessionId} {
        // Jeder darf Sessions lesen (für Viewer-Features)
        allow read: if true;
        
        // Erstellen: Nur authentifizierte Benutzer, die selbst Teilnehmer sind
        allow create: if request.auth != null && 
                      request.auth.uid in request.resource.data.participantUids;
        
        // Aktualisieren: Nur Teilnehmer dürfen Sessions aktualisieren
        allow update: if request.auth != null && 
                      request.auth.uid in resource.data.participantUids;
        
        // Löschen verboten (Sessions sind Teil der Historie)
        allow delete: if false;
    }

    // =====================================================================
    // STATS - Öffentlich lesbare, berechnete Statistiken
    // =====================================================================
    match /groupComputedStats/{groupId} {
        allow read: if true;
        allow write: if true;
    }

    match /playerComputedStats/{playerId} {
        allow read: if true;
        allow write: if true;
    }

    // =====================================================================
    // RATELIMITS - Nur für Cloud Functions
    // =====================================================================
    match /rateLimits/{rateLimitId} {
      // Nur Cloud Functions dürfen auf Rate-Limits zugreifen
      allow read, write: if false;
    }

    // =====================================================================
    // FALLBACK - Alle anderen Collections
    // =====================================================================
    // Gilt für: sessions, jassGameSummaries, groupComputedStats, etc.
    // Diese werden primär von Cloud Functions verwaltet.
    //
    // SICHERHEITS-FIX: Die vorherige Regel 'allow read: if true; allow write: if request.auth != null;'
    // war extrem unsicher und erlaubte jedem Lese- und angemeldeten Schreibzugriff.
    // Die neue Regel verweigert standardmässig allen Zugriff.
    // Für jede weitere Collection müssen explizite, sichere Regeln hinzugefügt werden.
    //
    // ✅ ELEGANTE LÖSUNG: Bessere Fehlerbehandlung für normale Zustände
    // Statt komplett zu blockieren, erlauben wir Lesezugriff für authentifizierte Benutzer
    // auf Collections, die möglicherweise leer sind (bessere UX)
    match /{document=**} {
      allow read: if request.auth != null; // Authentifizierte Benutzer dürfen lesen
      allow write: if false; // Schreibzugriff bleibt verboten
    }

    // =====================================================================
    // PLAYER-LOCKS - Concurrency Control für Player-Erstellung
    // =====================================================================
    match /player-locks/{userId} {
      // Nur der authentifizierte User darf sein eigenes Lock erstellen, lesen oder löschen
      allow create, read, delete: if request.auth != null && request.auth.uid == userId;
      // Niemand darf ein bestehendes Lock updaten (Lock-Semantik)
      allow update: if false;
    }
  }
}