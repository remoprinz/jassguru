rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // PLAYERS - √ñffentliche Spielerprofile
    // =====================================================================
    match /players/{playerId} {
      // Jeder darf Spielerprofile lesen (f√ºr Namen, Bilder etc.)
      allow read: if true;

      // Erstellen: Nur f√ºr sich selbst oder als Gastspieler
      allow create: if request.auth != null &&
                       (request.resource.data.userId == request.auth.uid ||
                        (request.resource.data.isGuest == true && request.resource.data.userId == null));

      // Aktualisieren: Nur eigene Profile, Gastspieler oder Nickname-Updates von Gruppen-Mitgliedern
      allow update: if request.auth != null &&
                       (
                         // Eigenes Profil oder Gastspieler (vollst√§ndige Berechtigung)
                         resource.data.userId == request.auth.uid ||
                         resource.data.isGuest == true ||
                         // Oder nur Nickname/displayName Update von authentifizierten Usern
                         // (F√ºr Gruppen-Synchronisation - sicher, da nur Name ge√§ndert wird)
                         (request.resource.data.diff(resource.data).affectedKeys().hasAny(['nickname', 'displayName']) &&
                          request.resource.data.diff(resource.data).affectedKeys().size() <= 2)
                       );
                        
      // L√∂schen: Nur eigene Profile oder Gastspieler
      allow delete: if request.auth != null &&
                       (resource.data.userId == request.auth.uid || 
                        resource.data.isGuest == true);

      // =====================================================================
      // PLAYER RATING HISTORY - Globale Rating-Historie
      // =====================================================================
      match /ratingHistory/{historyId} {
        // Jeder darf die globale Rating-Historie lesen (f√ºr Charts)
        allow read: if true;
        
        // Schreiben: Nur Backend (Cloud Functions)
        allow write: if false;
      }
    }

    // =====================================================================
    // USERS - Private Benutzerdaten
    // =====================================================================
    match /users/{userId} {
      // Zugriff: Nur der Benutzer selbst
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Erstellen: E-Mail muss mit Token √ºbereinstimmen
      allow create: if request.auth != null && 
                       request.auth.uid == userId &&
                       request.resource.data.email == request.auth.token.email;

      // Aktualisieren: playerId und email sind unver√§nderlich
      // ODER nur lastActiveGroupId wird aktualisiert
      allow update: if request.auth != null && 
                       request.auth.uid == userId &&
                       (
                         // Vollst√§ndiges Update: alle kritischen Felder bleiben gleich
                         (request.resource.data.playerId == resource.data.playerId &&
                          request.resource.data.email == resource.data.email) ||
                         // Oder nur lastActiveGroupId Update (sichere UX-Operation)
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastActiveGroupId'])
                       );
      
      // L√∂schen verboten (Datenintegrit√§t)
      allow delete: if false;
    }

    // =====================================================================
    // GROUPS - Gruppen
    // =====================================================================
    match /groups/{groupId} {
      // Jeder darf Gruppen lesen (E-Mails wurden entfernt)
      allow read: if true;

      // Erstellen: Ersteller wird automatisch Admin
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.adminIds &&
                    request.resource.data.createdBy == request.auth.uid;

      // Aktualisieren: Nur Gruppen-Admins
      allow update: if request.auth != null && 
                    request.auth.uid in resource.data.adminIds;

      // L√∂schen: Nur der urspr√ºngliche Ersteller
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.createdBy;

      // =====================================================================
      // NEUE REGELN F√úR GRUPPEN-SUBCOLLECTIONS
      // =====================================================================

      // Sessions in einer Gruppe
      match /sessions/{sessionId} {
        allow read: if true; // √ñffentlich lesbar
        allow create: if request.auth != null && 
                         request.auth.uid in request.resource.data.participantUids;
        allow update: if request.auth != null && 
                         request.auth.uid in resource.data.participantUids;
        allow delete: if false; // Sessions sind historisch
      }

      // ActiveGames in einer Gruppe
      match /activeGames/{gameId} {
        allow read: if true;
        allow create: if request.auth != null &&
                        request.auth.uid in request.resource.data.participantUids;
        allow update, delete: if request.auth != null &&
                                 request.auth.uid in resource.data.participantUids;
      }
      
      // JassGameSummaries (Sessions) in einer Gruppe
      match /jassGameSummaries/{sessionId} {
        allow read, list: if get(/databases/$(database)/documents/groups/$(groupId)).data.isPublic == true ||
                           (request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.playerIds);
        allow create, update: if request.auth != null &&
                                (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.playerIds ||
                                 request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds);
        allow delete: if false;
        
        // CompletedGames in einer Session - participantUids aus sessions/{sessionId} holen!
        match /completedGames/{gameNumber} {
          allow read: if get(/databases/$(database)/documents/groups/$(groupId)).data.isPublic == true ||
                       (request.auth != null && request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.playerIds);
          allow create, update: if request.auth != null &&
                                  request.auth.uid in get(/databases/$(database)/documents/sessions/$(sessionId)).data.participantUids;
          allow delete: if false;
        }
      }
      
      // Members in einer Gruppe
      match /members/{memberId} {
        allow read: if true;
        // Nur Admins der Gruppe d√ºrfen Mitglieder verwalten
        allow write: if request.auth != null &&
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds;
      }

      // Tournaments in einer Gruppe
      match /tournaments/{tournamentId} {
        allow read: if true;
        // Nur Admins der Gruppe d√ºrfen Turniere verwalten
        allow write: if request.auth != null &&
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds;
      }

      // Stats in einer Gruppe
      match /stats/{statsDoc} {
        allow read: if true;
        // Stats k√∂nnen von jedem Mitglied gelesen, aber nur vom System geschrieben werden
        // In der Praxis wird dies √ºber Cloud Functions oder Admin SDK gemacht
        // FIX: Schreibzugriff vom Client komplett blockieren
        allow write: if false;
      }

      // Invites in einer Gruppe  
      match /invites/{inviteId} {
        allow read: if true; // √ñffentlich lesbar f√ºr Join-Links
        // Nur Admins der Gruppe d√ºrfen Einladungen verwalten
        allow create: if request.auth != null &&
                        request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds;
        allow update, delete: if request.auth != null &&
                                 (request.auth.uid in get(/databases/$(database)/documents/groups/$(groupId)).data.adminIds ||
                                  request.auth.uid == resource.data.invitedBy);
      }

      // Player Ratings in einer Gruppe (Spiegelung der globalen Ratings)
      match /playerRatings/{playerId} {
        allow read: if true; // √ñffentlich lesbar f√ºr Gruppen-Leaderboards
        allow write: if false; // Nur f√ºr Cloud Functions und Scripts
        
        // üÜï Rating-Historie Subcollection
        match /history/{historyId} {
          allow read: if true; // √ñffentlich lesbar f√ºr Rating-Verlaufskurven
          allow write: if false; // Nur f√ºr Cloud Functions und Scripts
        }
      }

      // üÜï Aggregated Chart Data f√ºr Pre-computed Charts
      match /aggregated/chartData {
        allow read: if true; // √ñffentlich lesbar f√ºr Chart-Darstellung
        allow write: if false; // Nur f√ºr Cloud Functions und Scripts
      }

      // üÜï Aggregated Leaderboard f√ºr Performance-Optimierung
      match /aggregated/leaderboard {
        allow read: if true; // √ñffentlich lesbar f√ºr Leaderboard-Darstellung
        allow write: if false; // Nur f√ºr Cloud Functions und Scripts
      }
    }

    // =====================================================================
    // ACTIVEGAMES - Laufende Spiele (TEMPOR√ÑR - VEREINFACHT)
    // =====================================================================
    match /activeGames/{gameId} {
      // Jeder darf laufende Spiele lesen (es ist nur Jassen)
      allow read: if true;

      // ‚úÖ VEREINFACHT: Erstellen f√ºr alle authentifizierten Benutzer
      allow create: if request.auth != null;

      // ‚úÖ FLEXIBEL: Update mit mehreren Berechtigungsebenen  
      allow update: if request.auth != null && (
        // Prim√§r: participantUids
        (resource.data.participantUids != null && request.auth.uid in resource.data.participantUids) ||
        // Fallback: Gruppenadmin-Berechtigung
        (resource.data.groupId != null && 
         request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.adminIds)
      );

      // ‚úÖ FLEXIBEL: L√∂schen mit gleichen Berechtigungen
      allow delete: if request.auth != null && (
        (resource.data.participantUids != null && request.auth.uid in resource.data.participantUids) ||
        (resource.data.groupId != null && 
         request.auth.uid in get(/databases/$(database)/documents/groups/$(resource.data.groupId)).data.adminIds)
      );

      // Rounds-Subcollection: Gleiche Regeln wie Hauptdokument
      match /rounds/{roundId} {
        allow read: if true;
        // ‚úÖ KORRIGIERTER FIX: Erlaube Schreibzugriff, wenn die UID ODER die PlayerID des Benutzers in den Teilnehmerlisten des Spiels enthalten ist.
        // 1. Pr√ºfe, ob die Firebase Auth UID direkt in participantUids steht (Host-Fall)
        // 2. Pr√ºfe, ob die PlayerID des Benutzers in participantUids steht (Nicht-Host-Fall)
        allow write: if request.auth != null &&
                     (
                       request.auth.uid in get(/databases/$(database)/documents/activeGames/$(gameId)).data.participantUids ||
                       (
                         exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.playerId in get(/databases/$(database)/documents/activeGames/$(gameId)).data.participantUids
                       )
                     );
        allow delete: if false;
      }
    }

    // =====================================================================
    // TOURNAMENTS - Turniere
    // =====================================================================
    match /tournaments/{tournamentId} {
      // Jeder darf Turniere lesen
      allow read: if true;

      // Erstellen: Ersteller wird automatisch Admin
      allow create: if request.auth != null && 
                    request.auth.uid in request.resource.data.adminIds &&
                    request.resource.data.createdBy == request.auth.uid;

      // Aktualisieren: Turnier-Admins und Teilnehmer
      allow update: if request.auth != null && 
                    (request.auth.uid in resource.data.adminIds ||
                     request.auth.uid in resource.data.participantUids);

      // L√∂schen verboten (Turniere sind Teil der Historie)
      allow delete: if false;

      // Tournament Games-Subcollection: Admins und Teilnehmer d√ºrfen schreiben
      match /games/{gameId} {
        allow read: if true;
        allow write: if request.auth != null && 
                     (request.auth.uid in get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.adminIds ||
                      request.auth.uid in get(/databases/$(database)/documents/tournaments/$(tournamentId)).data.participantUids);
        allow delete: if false;
      }
    }



    // =====================================================================
    // SESSIONS - Jass-Sessions und Tournament-Sessions  
    // =====================================================================
    match /sessions/{sessionId} {
        // Jeder darf Sessions lesen (f√ºr Viewer-Features)
        allow read: if true;
        
        // ‚úÖ VEREINFACHT: Erstellen f√ºr alle authentifizierten Benutzer
        allow create: if request.auth != null;
        
        // ‚úÖ FLEXIBEL: Update mit mehreren Berechtigungsebenen
        allow update: if request.auth != null && (
          // Prim√§r: participantUids (neue Sessions)
          (resource.data.participantUids != null && request.auth.uid in resource.data.participantUids) ||
          // Fallback: createdBy (legacy Sessions)  
          resource.data.createdBy == request.auth.uid ||
      // Fallback: participantPlayerIds via Player-Lookup (falls n√∂tig)
      (resource.data.participantPlayerIds != null && 
       exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
       get(/databases/$(database)/documents/users/$(request.auth.uid)).data.playerId in resource.data.participantPlayerIds)
        );
        
        // L√∂schen verboten (Sessions sind Teil der Historie)
        allow delete: if false;
        
        // ‚úÖ NEU: CompletedGames in Sessions auch √∂ffentlich lesbar
        match /completedGames/{gameNumber} {
          allow read: if true; // √ñffentlich lesbar f√ºr Live-Viewer
          allow create, update: if request.auth != null &&
                                  request.auth.uid in get(/databases/$(database)/documents/sessions/$(sessionId)).data.participantUids;
          allow delete: if false;
        }
    }



    match /playerComputedStats/{playerId} {
        allow read: if true;
        // KORREKTUR: Schreibzugriff nur f√ºr Cloud Functions (vom Client blockiert)
        allow write: if false;
    }

    // =====================================================================
    // PLAYER RATINGS - Jass-Elo System
    // =====================================================================
    match /playerRatings/{playerId} {
        // Jeder darf Elo-Ratings lesen (f√ºr √∂ffentliche Profile)
        allow read: if true;
        // Schreibzugriff nur f√ºr Cloud Functions und Scripts
        allow write: if false;
    }

    // =====================================================================
    // RATELIMITS - Nur f√ºr Cloud Functions
    // =====================================================================
    match /rateLimits/{rateLimitId} {
      // Nur Cloud Functions d√ºrfen auf Rate-Limits zugreifen
      allow read, write: if false;
    }


    // =====================================================================
    // FALLBACK - Alle anderen Collections
    // =====================================================================
    // Gilt f√ºr: legacy Collections, Cache-Daten, etc.
    // Diese werden prim√§r von Cloud Functions verwaltet.
    //
    // SICHERHEITS-FIX: Die vorherige Regel 'allow read: if true; allow write: if request.auth != null;'
    // war extrem unsicher und erlaubte jedem Lese- und angemeldeten Schreibzugriff.
    // Die neue Regel verweigert standardm√§ssig allen Zugriff.
    // F√ºr jede weitere Collection m√ºssen explizite, sichere Regeln hinzugef√ºgt werden.
    //
    // ‚úÖ ELEGANTE L√ñSUNG: Bessere Fehlerbehandlung f√ºr normale Zust√§nde
    // Statt komplett zu blockieren, erlauben wir Lesezugriff f√ºr authentifizierte Benutzer
    // auf Collections, die m√∂glicherweise leer sind (bessere UX)
    
    // =====================================================================
    // COLLECTION GROUP QUERIES - Explizite Regeln f√ºr √∂ffentliche Zugriffe
    // =====================================================================
    match /{path=**}/jassGameSummaries/{sessionId} {
      // Erlaubt collectionGroup-Queries auf jassGameSummaries f√ºr √∂ffentliche Session-Ansichten
      allow read: if true;
    }
    
    match /{document=**} {
      allow read: if request.auth != null; // Authentifizierte Benutzer d√ºrfen lesen
      allow write: if false; // Schreibzugriff bleibt verboten
    }

    // =====================================================================
    // PLAYER-LOCKS - Concurrency Control f√ºr Player-Erstellung
    // =====================================================================
    match /player-locks/{userId} {
      // Nur der authentifizierte User darf sein eigenes Lock erstellen, lesen oder l√∂schen
      allow create, read, delete: if request.auth != null && request.auth.uid == userId;
      // Niemand darf ein bestehendes Lock updaten (Lock-Semantik)
      allow update: if false;
    }
  }
}