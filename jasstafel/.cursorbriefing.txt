Sehr geehrter Kollege,

Sie sind Experte @.cursorrules . Schauen Sie sich den aktuellen Stand und den Setup des projekts an @jasstafel und verinnerlichen Sie sich die Struuktur und den bestehenden Code. 

Ihre Aufgabe ist es, eine "Jass Kreidetafel"-App mit React, TypeScript und Next.js zu entwickeln. Bitte beachten Sie die folgenden detaillierten Spezifikationen:

1. Grundlayout (siehe Bild 1):
   - Hintergrund: Tiefschwarz (#000000), simuliert eine Kreidetafel.
   - Zwei rote "Z"-Formen: Eine oben, eine unten, repräsentieren die Spielfelder für zwei Teams.
   - Rote horizontale Linie: Teilt die Spielfelder in der Mitte.

2. Punktedarstellung:
   - Gesamtpunktzahl: Große, graue Ziffern (Opacity ca. 30%) in der Mitte jedes "Z" (siehe "974" und "560" in Bild 1).
   - Römische Zahlendarstellung:
     a. Obere Linie des "Z": Weiße Striche für je 100 Punkte. 10 Striche werden zu einem X zusammengefasst (1000 Punkte).
     b. Diagonale des "Z": Weiße Striche für je 50 Punkte.
     c. Untere Linie des "Z": Weiße Striche für je 20 Punkte.
   - Rundenzähler: Kleine weiße Ziffern oben links (9) und unten rechts (10) in jedem "Z".

3. Interaktivität (siehe Bilder 2 und 3):
   - Lange Berührung auf einer Teamseite öffnet einen Taschenrechner-Dialog.
   - Dialog-Design:
     a. Titel: "Runde schreiben" (Bild 3)
     b. Zwei Eingabefelder: Aktueller Wert (orange umrandet) und vorheriger Wert (grau).
     c. Multiplikator-Auswahl: 1x bis 8x
     d. Zifferntasten: 0-9
     e. Funktionstasten: Löschen (✕), OK, Abbrechen
   - Nach Bestätigung: Punktestand und visuelle Darstellung aktualisieren.

4. Menüleiste (siehe Bild 2):
   - Erscheint durch Wischen nach unten in der Bildschirmmitte.
   - Enthält rote Icons auf dunkelgrauem Hintergrund:
     a. Menü (drei horizontale Linien)
     b. Hilfe (Fragezeichen)
     c. Rückgängig (gebogener Pfeil nach links)
     d. Kartenansicht (Kartensymbol)

5. Responsives Design:
   - Wichtig: Immer Portraitformat erzwingen, auch wenn das Smartphone gedreht wird.
   - Anpassung an verschiedene Smartphone-Bildschirmgrößen, aber Layout bleibt konstant im Hochformat.

Technische Anforderungen:
- Verwenden Sie funktionale Komponenten und React Hooks.
- Setzen Sie Tailwind CSS für das Styling ein.
- Implementieren Sie die "Z"-Formen und Linien mit SVG.
- Nutzen Sie TypeScript für strikte Typisierung.
- Optimieren Sie die Performanz, besonders bei Animationen und Punkteaktualisierungen.

Implementierungsschritte:
1. Erstellen Sie das Grundgerüst mit Next.js und TypeScript.
2. Implementieren Sie das statische Layout der Kreidetafel (Bild 1).

@JassKreidetafel.tsx haben wir bereits angefangen.

3. Entwickeln Sie die Logik für die Punktedarstellung und -berechnung.
4. Fügen Sie die Interaktivität für die Punkteeingabe hinzu (Bilder 2 und 3).
5. Integrieren Sie die versteckte Menüleiste (Bild 2).
6. Implementieren Sie das responsive Design mit erzwungenem Portraitmodus.

Bitte beachten Sie:
- Verwenden Sie aussagekräftige Variablennamen auf Englisch.
- Kommentieren Sie komplexe Logik ausführlich.
- Achten Sie auf eine klare Komponentenstruktur und Trennung von Logik und Darstellung.
- Optimieren Sie die App für Touch-Geräte.

Bei Fragen oder Unklarheiten stehe ich Ihnen jederzeit zur Verfügung. Bitte melden Sie sich, wenn Sie weitere Details oder Erklärungen benötigen.

Denke Sie nun alles von Grund auf durch und dann nochmals und dann nochmals. So lange bis Sie sich absolut sicher sind, was der erste Schritt ist.

Gehen Sie in kleinen Schritten vor. Nach jedem erfolgreichen Schritt werde ich mit "weiter" antworten, um Sie zum weitermachen zu bewegen. So lange, bis der Plan erfolgreich umgesetzt ist.