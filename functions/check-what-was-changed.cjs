const admin = require('firebase-admin');

if (!admin.apps.length) {
  admin.initializeApp();
}

const db = admin.firestore();

async function checkWhatWasChanged() {
  console.log('üîç √úBERPR√úFE GENAU, WAS VER√ÑNDERT WURDE...\n');
  
  try {
    const tournamentId = '6eNr8fnsTO06jgCqjelt';
    
    // Lade das Turnier
    const tournamentDoc = await db.collection('jassGameSummaries').doc(tournamentId).get();
    const tournament = tournamentDoc.data();
    
    console.log(`üèÜ Turnier: ${tournamentId}`);
    console.log(`üìÖ Datum: ${tournament.startedAt ? new Date(tournament.startedAt.seconds * 1000).toLocaleDateString('de-CH') : 'Unbekannt'}`);
    
    if (!tournament.gameResults || tournament.gameResults.length === 0) {
      console.log('‚ùå Keine gameResults gefunden!');
      return;
    }
    
    console.log(`\nüìä ALLE SPIELE IM TURNIER:`);
    console.log(`==============================`);
    
    for (let i = 0; i < tournament.gameResults.length; i++) {
      const game = tournament.gameResults[i];
      const gameNumber = i + 1;
      
      console.log(`\nüéÆ SPIEL ${gameNumber}:`);
      console.log(`   Top Score: ${game.topScore}`);
      console.log(`   Bottom Score: ${game.bottomScore}`);
      console.log(`   Winner: ${game.winnerTeam}`);
      console.log(`   Top Striche:`, game.finalStriche?.top || {});
      console.log(`   Bottom Striche:`, game.finalStriche?.bottom || {});
      
      // Pr√ºfe auf verd√§chtige Werte
      if (game.topScore > 5000 || game.bottomScore > 5000) {
        console.log(`   ‚ö†Ô∏è  VERD√ÑCHTIG: Sehr hohe Scores!`);
      }
      if (game.topScore === 4200 && game.bottomScore === 3550) {
        console.log(`   üîß GE√ÑNDERT: Diese Scores wurden vom Script gesetzt!`);
      }
    }
    
    console.log(`\nüìà SESSION-LEVEL AGGREGATIONEN:`);
    console.log(`===============================`);
    console.log(`Total Top Scores: ${tournament.finalScores?.top || 0}`);
    console.log(`Total Bottom Scores: ${tournament.finalScores?.bottom || 0}`);
    console.log(`Top Wins: ${tournament.gameWinsByTeam?.top || 0}`);
    console.log(`Bottom Wins: ${tournament.gameWinsByTeam?.bottom || 0}`);
    console.log(`Winner: ${tournament.winnerTeamKey || 'Unbekannt'}`);
    
    console.log(`\nTop Striche:`, tournament.finalStriche?.top || {});
    console.log(`Bottom Striche:`, tournament.finalStriche?.bottom || {});
    
    console.log(`\nTop Event Counts:`, tournament.eventCounts?.top || {});
    console.log(`Bottom Event Counts:`, tournament.eventCounts?.bottom || {});
    
    // Pr√ºfe, ob nur Spiel 10 ver√§ndert wurde
    console.log(`\nüéØ ANALYSE: WAS WURDE VER√ÑNDERT?`);
    console.log(`=====================================`);
    
    let changedGames = [];
    for (let i = 0; i < tournament.gameResults.length; i++) {
      const game = tournament.gameResults[i];
      const gameNumber = i + 1;
      
      // Pr√ºfe auf typische Script-√Ñnderungen
      if (game.topScore === 4200 && game.bottomScore === 3550) {
        changedGames.push(gameNumber);
      }
    }
    
    if (changedGames.length === 1 && changedGames[0] === 10) {
      console.log(`‚úÖ NUR SPIEL 10 WURDE VER√ÑNDERT - KORREKT!`);
    } else if (changedGames.length > 1) {
      console.log(`‚ùå MEHRERE SPIELE WURDEN VER√ÑNDERT: ${changedGames.join(', ')}`);
      console.log(`üö® DAS IST NICHT KORREKT!`);
    } else if (changedGames.length === 0) {
      console.log(`‚ùì KEINE OFFENSICHTLICHEN SCRIPT-√ÑNDERUNGEN ERKANNT`);
    }
    
    console.log(`\nüîç LETZTE √ÑNDERUNG:`);
    if (tournament.lastUpdated) {
      const lastUpdate = new Date(tournament.lastUpdated.seconds * 1000);
      console.log(`   ${lastUpdate.toLocaleString('de-CH')}`);
    } else {
      console.log(`   Keine Timestamp verf√ºgbar`);
    }
    
  } catch (error) {
    console.error('‚ùå Fehler bei der √úberpr√ºfung:', error);
  }
}

checkWhatWasChanged()
  .then(() => {
    console.log('\nüîç √úberpr√ºfung abgeschlossen!');
    process.exit(0);
  })
  .catch(error => {
    console.error('‚ùå Script-Fehler:', error);
    process.exit(1);
  });
